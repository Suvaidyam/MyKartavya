[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "\n<div class=\"container\">\n    <h3>Leaderboard</h3>\n    <div class=\"tabs\">\n        <button class=\"tab active\" id=\"timeTab\">By Time Donated</button>\n        <button class=\"tab inactive\" id=\"karmaTab\">By Karma Points</button>\n    </div>\n\n    <table class=\"leaderboard-table\">\n        <thead>\n            <tr>\n                <th>#</th>\n                <th>Name</th>\n                <th>Time</th>\n                <th>Rank</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>1</td>\n                <td class=\"profile\"><img src=\"profile1.jpg\" alt=\"\"> Abhinav Tyagi</td>\n                <td>13h</td>\n                <td>1</td>\n            </tr>\n           \n        </tbody>\n    </table>\n</div>",
  "modified": "2025-03-12 17:53:40.646133",
  "name": "Leadboard",
  "private": 0,
  "roles": [],
  "script": "// here root_element is provided by default in Frappe\nlet timeTab = root_element.querySelector(\"#timeTab\");\nlet karmaTab = root_element.querySelector(\"#karmaTab\");\nlet leaderboardTable = root_element.querySelector(\".leaderboard-table tbody\");\nlet leaderboardHead = root_element.querySelector(\".leaderboard-table thead\"); // Select table head\nlet users = []; // Store users globally\n\n// Add event listeners to toggle the active tab\ntimeTab.addEventListener(\"click\", function () {\n    this.classList.add(\"active\");\n    this.classList.remove(\"inactive\");\n    karmaTab.classList.add(\"inactive\");\n    karmaTab.classList.remove(\"active\");\n    showTimeLeaderboard(); // Show time leaderboard when clicked\n});\n\nkarmaTab.addEventListener(\"click\", function () {\n    this.classList.add(\"active\");\n    this.classList.remove(\"inactive\");\n    timeTab.classList.add(\"inactive\");\n    timeTab.classList.remove(\"active\");\n    showKarmaLeaderboard(); // Show karma leaderboard when clicked\n});\n\n// Function to fetch and store users\nconst fetchLoggedInUser = async () => {\n    try {\n        const response = await fetch('/api/method/mykartavya.controllers.api.get_top_users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                page: 1,\n                page_size: 8\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (data && data.message && data.message.users) {\n            console.log(\"Fetched users:\", data.message.users);\n\n            // Store users globally\n            users = data.message.users;\n\n            // Default to showing time-based leaderboard\n            showTimeLeaderboard();\n        }\n    } catch (error) {\n        console.error('Error fetching logged-in user:', error);\n    }\n};\n\n// Function to update table head dynamically\nconst updateTableHead = (columns) => {\n    leaderboardHead.innerHTML = `\n        <tr>\n            ${columns.map(col => `<th>${col}</th>`).join(\"\")}\n        </tr>\n    `;\n};\n\n// Function to display time-based leaderboard\nconst showTimeLeaderboard = () => {\n    leaderboardTable.innerHTML = \"\"; // Clear table\n\n    // Update table head dynamically for time-based leaderboard\n    updateTableHead([\"#\", \"Name\", \"Time(hr)\", \"Rank\"]);\n\n    // Sort users by duration (descending order)\n    let sortedUsers = [...users].sort((a, b) => b.duration - a.duration);\n\n    sortedUsers.forEach((user, index) => {\n        let row = document.createElement(\"tr\");\n\n        // Get first letter of full_name (handle empty name)\n        let firstLetter = user.full_name \n            ? user.full_name.charAt(0).toUpperCase() \n            : \"?\";\n\n        // Use profile image if available; otherwise, use first letter as placeholder\n        let profileImage = user.user_image\n            ? `/files/${user.user_image}`\n            : `https://via.placeholder.com/50/CCCCCC/000000?text=${firstLetter}`;\n\n        row.innerHTML = `\n            <td>${index + 1}</td>\n            <td class=\"profile\">\n                <img src=\"${profileImage}\" alt=\"User Image\"> ${user.full_name || \"Unknown\"}\n            </td>\n            <td>${(user.duration / 3600).toFixed(2)} hr</td>\n            <td>${index + 1}</td>\n        `;\n\n        leaderboardTable.appendChild(row);\n    });\n\n    console.log(\"===== Time-based Leaderboard Updated =====\");\n};\n\n// Function to display karma-based leaderboard\nconst showKarmaLeaderboard = () => {\n    leaderboardTable.innerHTML = \"\"; // Clear table\n\n    // Update table head dynamically for karma-based leaderboard\n    updateTableHead([\"#\", \"Name\", \"Karma Points\", \"Rank\"]);\n\n    // Sort users by karma points (descending order)\n    let sortedUsers = [...users].sort((a, b) => b.karma_points - a.karma_points);\n\n    sortedUsers.forEach((user, index) => {\n        let row = document.createElement(\"tr\");\n\n        // Get first letter of full_name (handle empty name)\n        let firstLetter = user.full_name \n            ? user.full_name.charAt(0).toUpperCase() \n            : \"?\";\n\n        // Use profile image if available; otherwise, use first letter as placeholder\n        let profileImage = user.user_image\n            ? `/files/${user.user_image}`\n            : `https://via.placeholder.com/50/CCCCCC/000000?text=${firstLetter}`;\n\n        row.innerHTML = `\n            <td>${index + 1}</td>\n            <td class=\"profile\">\n                <img src=\"${profileImage}\" alt=\"User Image\"> ${user.full_name || \"Unknown\"}\n            </td>\n            <td>${user.karma_points} pts</td>\n            <td>${index + 1}</td>\n        `;\n\n        leaderboardTable.appendChild(row);\n    });\n\n    console.log(\"===== Karma-based Leaderboard Updated =====\");\n};\n\n// Call the function to fetch users when the script loads\nfetchLoggedInUser();\n",
  "style": " .container {\n            background: white;\n            padding: 20px;\n            border-radius: 10px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            width: 400px;\n        }\n        .tabs {\n            display: flex;\n            gap: 10px;\n        }\n        .tab {\n            padding: 8px 12px;\n            border-radius: 8px;\n            border: none;\n            cursor: pointer;\n            font-size: 14px;\n        }\n        .active {\n            background-color: #ff7f41;\n            color: white;\n        }\n        .inactive {\n            background-color: #ddd;\n            color: #555;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 10px;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n        th {\n            background-color: #f1f1f1;\n        }\n        .profile {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        .profile img {\n            width: 25px;\n            height: 25px;\n            border-radius: 50%;\n        }"
 }
]