[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"container\">\n        <h2>Hours & Value contributed per SDG</h2>\n        <table class=\"sdg-table\">\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>SDG</th>\n                    <th>Hours</th>\n                    <th>Value</th>\n                    <th>Participation</th>\n                </tr>\n            </thead>\n            <tbody>\n                \n              \n        \n                \n            </tbody>\n        </table>\n    </div>\n",
  "modified": "2025-03-18 15:30:25.935121",
  "name": "SDG Details",
  "private": 0,
  "roles": [],
  "script": "let SdgTable = root_element.querySelector(\".sdg-table tbody\");\nlet SDGs = [];\n\nconst fetchSDGContributions = async () => {\n    console.log('Fetching SDG contributions...');\n    try {\n        const response = await fetch('/api/method/mykartavya.controllers.api.get_sdg_contribution_details', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log(\"API Response:\", data);\n\n        if (data.message && Array.isArray(data.message)) {\n            SDGs = data.message;\n            populateSDGTable();\n        } else {\n            console.warn('Unexpected API response format:', data);\n        }\n\n    } catch (error) {\n        console.error('Error fetching SDG contributions:', error);\n    }\n};\n\nconst populateSDGTable = () => {\n    // Clear existing rows\n    SdgTable.innerHTML = \"\";\n\n    if (SDGs.length > 0) {\n        SDGs.forEach((sdg, index) => {\n            let hasImage = !!sdg.sdg_image; // Convert to boolean (true if image exists, false otherwise)\n            let firstLetter = sdg.sdg_name ? sdg.sdg_name.charAt(0).toUpperCase() : \"?\";\n            \n            let row = document.createElement(\"tr\");\n            row.innerHTML = `\n                <td>${index + 1}</td>\n                <td>\n                    ${hasImage ? `<img src=\"${sdg.sdg_image}\" alt=\"sdg_img\" class=\"sdg_img\">` : \"\"}\n                    <span class=\"sdg_avtar ${hasImage ? 'hidden' : ''}\">${firstLetter}</span>\n                    ${sdg.sdg_name || \"Unknown SDG\"}\n                </td>\n                <td>â‚¹ ${sdg.total_work_values || 0}</td>\n                <td>${sdg.total_hours || 0}</td>\n                <td>${sdg.volunteer_count || 0}</td>\n            `;\n            SdgTable.appendChild(row);\n        });\n    } else {\n        console.log('No SDG contributions available.');\n    }\n};\n\n// Call the function to fetch SDG contributions\nfetchSDGContributions();\n",
  "style": ".container {\n    max-height: 389px;\n    min-height: 389px;/* Sets the maximum height limit */\n    overflow-y: auto;   \n    background-color: white;\n    padding: 20px;\n    font-family: 'Poppins', sans-serif;\n    border: 1px solid #D9D9D9;\n    border-radius: 8px;\n}\n.container h2{\n            font-size: 16px;\n            font-weight: 400;\n\n        }\n\n/* Heading */\nh2 {\n    text-align: left;\n    font-size: 20px;\n    margin-bottom: 15px;\n}\n\n/* Table styling */\n.sdg-table {\n    width: 100%;\n    border-collapse: collapse;\n    text-align: left;\n}\n\n.sdg-table th, .sdg-table td {\n    border-bottom: 1px solid #ddd;\n    border-right: 1px solid #ddd;\n    padding: 8px;\n    font-size: 14px;\n    text-align:center;\n}\ntd:last-child, th:last-child {\n    border-right: none;\n}\nth:nth-child(2), tr,td:nth-child(2){\n    text-align:left;\n    padding-left:20px;\n}\n\n\n.sdg-table th {\n    background-color: #F5F5F5;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 110%;\n    letter-spacing: 0.25%;\n}\n\n\n\n\n/* Image icons */\n.sdg-table td img {\n    width: 26px;\n    height: 26px;\n    border-radius: 50%;\n    margin-right: 0px;\n    vertical-align: middle;\n}\n.sdg_avtar{\n    background-color: #D9D9D9;\n    width: 26px;\n    height: 26px;\n    font-size: 14px;\n    color: #333;  /* Darker text for better contrast */\n    border-radius: 50%;\n    padding: 5px 8px;  /* Combined padding */\n    text-transform: uppercase;\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "\n<div class=\"container\">\n    <h3>Leaderboard</h3>\n    <div class=\"tabs\">\n        <button class=\"tab active\" id=\"timeTab\">By Time Donated</button>\n        <button class=\"tab inactive\" id=\"karmaTab\">By Karma Points</button>\n    </div>\n\n    <table class=\"leaderboard-table\">\n        <thead>\n            <tr>\n                <th>Sno</th>\n                <th>Name</th>\n                <th>Time</th>\n                <th>Rank</th>\n            </tr>\n        </thead>\n        <tbody>\n          \n           \n        </tbody>\n    </table>\n</div>",
  "modified": "2025-03-18 15:31:39.842072",
  "name": "Leadboard",
  "private": 0,
  "roles": [],
  "script": "// Here root_element is provided by default in Frappe\nlet timeTab = root_element.querySelector(\"#timeTab\");\nlet karmaTab = root_element.querySelector(\"#karmaTab\");\nlet leaderboardTable = root_element.querySelector(\".leaderboard-table tbody\");\nlet leaderboardHead = root_element.querySelector(\".leaderboard-table thead\"); // Select table head\nlet users = []; // Store users globally\n\n// Add event listeners to toggle the active tab\ntimeTab.addEventListener(\"click\", function () {\n    this.classList.add(\"active\");\n    this.classList.remove(\"inactive\");\n    karmaTab.classList.add(\"inactive\");\n    karmaTab.classList.remove(\"active\");\n    showTimeLeaderboard(); // Show time leaderboard when clicked\n});\n\nkarmaTab.addEventListener(\"click\", function () {\n    this.classList.add(\"active\");\n    this.classList.remove(\"inactive\");\n    timeTab.classList.add(\"inactive\");\n    timeTab.classList.remove(\"active\");\n    showKarmaLeaderboard(); // Show karma leaderboard when clicked\n});\n\n// Function to fetch and store users\nconst fetchLoggedInUser = async () => {\n    try {\n        const response = await fetch('/api/method/mykartavya.controllers.api.get_top_users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                page: 1,\n                page_size: 8\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (data.message && Array.isArray(data.message.users)) {\n            console.log(\"Fetched users:\", data.message.users);\n\n            // Store users globally\n            users = data.message.users;\n\n            // Default to showing time-based leaderboard\n            showTimeLeaderboard();\n        } else {\n            console.warn('Unexpected API response format:', data);\n        }\n    } catch (error) {\n        console.error('Error fetching logged-in user:', error);\n    }\n};\n\n// Function to update table head dynamically\nconst updateTableHead = (columns) => {\n    leaderboardHead.innerHTML = `\n        <tr>\n            ${columns.map(col => `<th>${col}</th>`).join(\"\")}\n        </tr>\n    `;\n};\n\n// Function to generate user avatar (image or first letter)\nconst getUserAvatar = (user) => {\n    if (user.user_image) {\n        return `<img src=\"/files/${user.user_image}\" class=\"profile-img\" alt=\"User Image\">`;\n    } else {\n        let firstLetter = user.full_name ? user.full_name.charAt(0).toUpperCase() : \"?\";\n        return `<span class=\"user_avtar\">${firstLetter}</span>`;\n    }\n};\n\n// Function to display time-based leaderboard\nconst showTimeLeaderboard = () => {\n    leaderboardTable.innerHTML = \"\"; // Clear table\n\n    // Update table head dynamically for time-based leaderboard\n    updateTableHead([\"#\", \"Name\", \"Time(hr)\", \"Rank\"]);\n\n    // Sort users by duration (descending order)\n    let sortedUsers = [...users].sort((a, b) => b.duration - a.duration);\n\n    sortedUsers.forEach((user, index) => {\n        let row = document.createElement(\"tr\");\n\n        row.innerHTML = `\n            <td>${index + 1}</td>\n            <td class=\"profile\">\n                ${getUserAvatar(user)}\n                <span class=\"profile-name\">${user.full_name || \"Unknown\"}</span>\n            </td>\n            <td>${(user.duration / 3600).toFixed(2)} hr</td>\n            <td>${index + 1}</td>\n        `;\n\n        leaderboardTable.appendChild(row);\n    });\n\n    console.log(\"===== Time-based Leaderboard Updated =====\");\n};\n\n// Function to display karma-based leaderboard\nconst showKarmaLeaderboard = () => {\n    leaderboardTable.innerHTML = \"\"; // Clear table\n\n    // Update table head dynamically for karma-based leaderboard\n    updateTableHead([\"#\", \"Name\", \"Karma Points\", \"Rank\"]);\n\n    // Sort users by karma points (descending order)\n    let sortedUsers = [...users].sort((a, b) => b.karma_points - a.karma_points);\n\n    sortedUsers.forEach((user, index) => {\n        let row = document.createElement(\"tr\");\n\n        row.innerHTML = `\n            <td>${index + 1}</td>\n            <td class=\"profile\">\n                ${getUserAvatar(user)}\n                <span class=\"profile-name\">${user.full_name || \"Unknown\"}</span>\n            </td>\n            <td>${user.karma_points} pts</td>\n            <td>${index + 1}</td>\n        `;\n\n        leaderboardTable.appendChild(row);\n    });\n\n    console.log(\"===== Karma-based Leaderboard Updated =====\");\n};\n\n// Call the function to fetch users when the script loads\nfetchLoggedInUser();\n",
  "style": ".container {\n    min-height: 389px;  \n    max-height: 389px;  \n    overflow-y: auto;   \n    background: white;\n    padding: 20px;\n    border: 1px solid #D9D9D9;\n    border-radius: 8px;\n    width: 100%;\n    font-family: 'Poppins', sans-serif;\n}\n\n.container h3 {\n    font-size: 16px;\n    font-weight: 400;\n}\n\n.tabs {\n    /* display: flex; */\n    gap: 10px;\n}\n\n.tab {\n    padding: 4px 12px;\n    border-radius: 8px;\n    border: none;\n    cursor: pointer;\n    font-size: 14px;\n}\n\n.active {\n    background-color: #fa5721;\n    color: white;\n}\n\n.inactive {\n    background-color: #ddd;\n    color: #555;\n}\n\ntable {\n    width: 100%;\n    border-collapse: collapse; /* Applied to table instead of th, td */\n    margin-top: 10px;\n}\n\nth, td {\n    border-bottom: 1px solid #ddd;\n    border-right: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n}\n\n/* Remove right border from last column */\ntd:last-child, th:last-child {\n    border-right: none;\n}\n\n\nth:nth-child(2),td:nth-child(2) {\n    text-align: left;\n    padding-left:20px;\n}\nth, td:nth-child(2) {\n    padding-left:20px;\n}\ntr, td:nth-child(3),th:nth-child(3) {\n    text-align:center;\n}\ntr, td:last-child,th:last-child {\n    text-align:center;\n    /*padding-right:20px;*/\n}\n\n\n\nth {\n    background-color: #F5F5F5;\n    border-bottom: 1px solid #ddd;\n    border-right: 1px solid #ddd;\n}\n\n\n\n\n.profile img {\n    width: 26px;\n    height: 26px;\n    border-radius: 50%;\n}\n.user_avtar{\n    background-color: #D9D9D9;\n    width: 26px;\n    height: 26px;\n    font-size: 14px;\n    color: #333;  /* Darker text for better contrast */\n    border-radius: 50%;\n    padding: 5px 8px;  /* Combined padding */\n    text-transform: uppercase;\n}\n}\n"
 }
]